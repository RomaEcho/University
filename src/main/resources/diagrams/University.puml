@startuml
'!theme plain
!theme blueprint
skinparam BackgroundColor #000c18
'skinparam ClassBackgroundColor #000c18
skinparam linetype ortho

title University Class Diagram
class Person {
    firstName: String
    lastName: String
    birthday: LocalDate
    gender: String
    phone: String
    email: String
    address: String
    ..
    setPhone(String phone): void
    setEmail(String email): void
    setAddress(String address): void
}
class Student {
    startDate: LocalDate
    examEvents: List<ExamEvent>
    state: StudentState
    ..
    setState(StudentState state): void
}
enum StudentState {
    ACTIVE
    TERMINATED
    ABSOLVENT
}
class UniversityStaff {
    number: String
    title: String
}
class Subject {
    number: Integer
    name: String
    description: String
}

class Course {
    topic: String
    subject: Subject
    description: String
    start: LocalDate
    end: LocalDate
    lecturer: Lecturer
    numberOfHours: Integer
    rate: Integer
    ..
    setLecturer(Lecturer lecturer): void
    setNumberOfHours(Integer hours): void
    setRate(Integer rate): void
}
class Lecturer {
    level: String
    ..
    setLevel(String level): void
}
class Exam {
    title: String
    description: String
}
class ExamEvent {
    exam: Exam
    date: LocalDate
    start: LocalTime
    end: LocalTime
    state: ExamState
    lab: Integer
    rate: Integer
    ..
    setDate(LocalDate examDate): void
    setState(ExamState state): void
    setLab(Integer lab): void
    setRate(Integer rate): void
}
enum ExamState {
    UPCOMING
    ONGOING
    CLOSED
}
class Faculty {
    department: String
    address: String
}
class University {
    name: String
    hqLocation: String
}
class Lecture {
    Course: Course
    startTime: LocalDateTime
    lab: Integer
    ..
    setStartTime(LocalDateTime time): void
    setLab(Integer lab): void
}

class FacultySubjects {
    facultyId: Integer
    subjectId: Integer
}
interface TimetableService {
    getTimetableForDay(): List<Lecture>
    getTimetableForMonth(): List<Lecture>
}
class StudentService {
    addCourse(Course course): void
    removeCourse(Course course): void
    addExamEvent(ExamEvent event): void
    removeExamEvent(ExamEvent event): void
}
class LecturerService

Person <|-right- UniversityStaff
UniversityStaff <|-- Student
UniversityStaff <|-- Lecturer
Student *-up- StudentState
Course *-up- Lecturer
Student o-up- ExamEvent
ExamEvent o-- Exam
ExamEvent *-right- ExamState
Course o-left- Subject
Faculty --* FacultySubjects
Subject -left* FacultySubjects
University -left* Faculty
Student <... StudentService
StudentService <|.. TimetableService
LecturerService <|.. TimetableService
LecturerService .> Lecturer
TimetableService .right.> Lecture
Course --o Lecture


legend
    The getters are omitted
    The setters shown only for non-final fields
endlegend

@enduml